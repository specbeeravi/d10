<?php

/**
 * @file
 * Install/uninstall visitors geoip module.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements hook_requirements().
 */
function visitors_geoip_requirements($phase) {
  $requirements = [];

  switch ($phase) {
    case 'install':
      $geoip2_installed = class_exists('GeoIp2\Database\Reader');
      if (!$geoip2_installed) {
        $requirements['visitors_geoip'] = [
          'title' => t('Visitors GeoIP'),
          'value' => t('Missing dependency.'),
          'description' => t(
            'The @module module requires the @geoip2 package. Install visitors using composer.',
            [
              '@module' => 'visitors_geoip',
              '@geoip2' => 'geoip2/geoip2',
            ]
          ),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
      break;

    case 'runtime':
      $service = \Drupal::service('visitors_geoip.lookup');
      $meta = $service->metadata();
      $requirements['visitors_geoip'] = [
        'title' => t('Visitors GeoIP'),
        'value' => '',
      ];

      if (!is_null($meta)) {
        $requirements['visitors_geoip']['value'] .= t(
          'Type: @database_type build: @buildEpoch',
          [
            '@database_type' => $meta->databaseType,
            '@buildEpoch' => DrupalDateTime::createFromTimestamp($meta->buildEpoch),
          ]
        );
        $requirements['visitors_geoip']['severity'] = REQUIREMENT_OK;
      }

      if (!extension_loaded('maxminddb')) {
        $requirements['visitors_geoip']['value'] .= ' ' . t(
          'The @extension_geoip PHP extension is not installed.',
          ['@extension_geoip' => 'maxminddb']
        );
        $requirements['visitors_geoip']['severity'] = REQUIREMENT_WARNING;
      }
      break;
  }

  return $requirements;
}

/**
 * Implements hook_schema_alter().
 */
function visitors_geoip_schema_alter(&$schema) {
  $schema['visitors'] = [
    'fields' => [
      'location_continent_code' => [
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE,
        'default' => '',
      ],
      'location_country_code' => [
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE,
        'default' => '',
      ],
      'location_country_name' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'location_region' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'location_city' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'location_postal' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ],
      'location_latitude' => [
        'type' => 'numeric',
        'precision' => 13,
        'scale' => 10,
        'default' => NULL,
      ],
      'location_longitude' => [
        'type' => 'numeric',
        'precision' => 13,
        'scale' => 10,
        'default' => NULL,
      ],
      'location_area_code' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => NULL,
      ],
    ],
  ];

  return $schema;
}

/**
 * Implements hook_install().
 */
function visitors_geoip_install() {
  $schema = Database::getConnection()->schema();
  $table = 'visitors';
  if (!$schema->fieldExists($table, 'location_continent_code')) {
    $schema->addField(
      'visitors',
      'location_continent_code',
      [
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE,
        'default' => '',
      ]
    );
  }

  if (!$schema->fieldExists($table, 'location_country_code')) {
    $schema->addField(
      'visitors',
      'location_country_code',
      [
        'type' => 'varchar',
        'length' => 2,
        'not null' => TRUE,
        'default' => '',
      ]
    );
  }

  if (!$schema->fieldExists($table, 'location_country_name')) {
    $schema->addField(
      'visitors',
      'location_country_name',
      [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ]
    );
  }

  if (!$schema->fieldExists($table, 'location_region')) {
    $schema->addField(
      'visitors',
      'location_region',
      [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ]
    );
  }

  if (!$schema->fieldExists($table, 'location_city')) {
    $schema->addField(
      'visitors',
      'location_city',
      [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ]
    );
  }

  if (!$schema->fieldExists($table, 'location_postal')) {
    $schema->addField(
      'visitors',
      'location_postal',
      [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ]
    );
  }

  if (!$schema->fieldExists($table, 'location_latitude')) {
    $schema->addField(
      'visitors',
      'location_latitude',
      [
        'type' => 'numeric',
        'precision' => 13,
        'scale' => 10,
        'default' => NULL,
      ]
    );
  }

  if (!$schema->fieldExists($table, 'location_longitude')) {
    $schema->addField(
      'visitors',
      'location_longitude',
      [
        'type' => 'numeric',
        'precision' => 13,
        'scale' => 10,
        'default' => NULL,
      ]
    );
  }

  if (!$schema->fieldExists($table, 'location_area_code')) {
    $schema->addField(
      'visitors',
      'location_area_code',
      [
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => NULL,
      ]
    );
  }

}

/**
 * Implements hook_uninstall().
 */
function visitors_geoip_uninstall() {
  $table = 'visitors';
  $schema = \Drupal::database()->schema();
  $schema->dropField($table, 'location_continent_code');
  $schema->dropField($table, 'location_country_code');
  $schema->dropField($table, 'location_country_name');
  $schema->dropField($table, 'location_region');
  $schema->dropField($table, 'location_city');
  $schema->dropField($table, 'location_postal');
  $schema->dropField($table, 'location_latitude');
  $schema->dropField($table, 'location_longitude');
  $schema->dropField($table, 'location_area_code');
}

/**
 * GeoIP2 compatibility.
 */
function visitors_geoip_update_8215(&$sandbox) {
  $schema = \Drupal::database()->schema();

  $schema->dropField('visitors', 'visitors_country_code3');
  $schema->dropField('visitors', 'visitors_dma_code');

  $schema->changeField('visitors', 'visitors_continent_code', 'location_continent_code', [
    'type' => 'varchar',
    'length' => 2,
    'not null' => TRUE,
    'default' => '',
  ]
  );
  $schema->changeField('visitors', 'visitors_country_code', 'location_country_code', [
    'type' => 'varchar',
    'length' => 2,
    'not null' => TRUE,
    'default' => '',
  ]
  );
  $schema->changeField('visitors', 'visitors_country_name', 'location_country_name', [
    'type' => 'varchar',
    'length' => 128,
    'not null' => TRUE,
    'default' => '',
  ]
  );
  $schema->changeField('visitors', 'visitors_region', 'location_region', [
    'type' => 'varchar',
    'length' => 128,
    'not null' => TRUE,
    'default' => '',
  ]
  );
  $schema->changeField('visitors', 'visitors_city', 'location_city', [
    'type' => 'varchar',
    'length' => 128,
    'not null' => TRUE,
    'default' => '',
  ]
  );
  $schema->changeField('visitors', 'visitors_postal', 'location_postal', [
    'type' => 'varchar',
    'length' => 128,
    'not null' => TRUE,
    'default' => '',
  ]
  );
  $schema->changeField('visitors', 'visitors_latitude', 'location_latitude', [
    'type' => 'numeric',
    'precision' => 13,
    'scale' => 10,
    'default' => NULL,
  ]);
  $schema->changeField('visitors', 'visitors_longitude', 'location_longitude', [
    'type' => 'numeric',
    'precision' => 13,
    'scale' => 10,
    'default' => NULL,
  ]);
  $schema->changeField('visitors', 'visitors_area_code', 'location_area_code', [
    'type' => 'int',
    'unsigned' => TRUE,
    'default' => NULL,
  ]);

}
