<?php

/**
 * @file
 * Logs visitors for your site.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\visitors\Component\Render\JavaScriptSnippet;
use Drupal\visitors\Form\Settings;

/**
 * Implements hook_theme().
 */
function visitors_theme(): array {
  return [
    'visitors_jqplot' => [
      'template' => 'visitors_jqplot',
      'variables' => [
        'x' => NULL,
        'y' => NULL,
        'width' => NULL,
        'height' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_cron().
 */
function visitors_cron(): void {
  $flush_log_timer = \Drupal::config('visitors.config')
    ->get('flush_log_timer') ?? 0;

  if ($flush_log_timer > 0) {
    $delete_since = (string) time() - $flush_log_timer;
    // Clean up expired access logs.
    \Drupal::database()->delete('visitors')
      ->condition('visitors_date_time', $delete_since, '<')
      ->execute();
  }
}

/**
 * Get value of MySQL system variable time_zone.
 *
 * @return string
 *   Value of MySQL system variable time_zone.
 */
function visitors_get_mysql_current_timezone() {
  $query = 'SHOW variables LIKE \'time_zone\'';
  return \Drupal::database()->query($query)->fetchField(1);
}

/**
 * Get difference in seconds user timezone and GMT.
 *
 * @return int
 *   Difference in seconds user timezone and GMT.
 */
function visitors_timezone_diff() {
  $timezone = date_default_timezone_get();
  return timezone_offset_get(timezone_open($timezone), date_create());
}

/**
 * Set date format for sql query.
 *
 * @param string $field_name
 *   Field name.
 * @param string $format
 *   Date format.
 *
 * @return string
 *   Date format.
 */
function visitors_date_format_sql($field_name, $format) {
  $date_format = NULL;
  switch (Database::getConnection()->driver()) {
    case 'pgsql':
      $date_format = visitors_pgsql_date_format_sql($field_name, $format);
      break;

    case 'sqlite':
      $date_format = visitors_sqlite_date_format_sql($field_name, $format);
      break;

    default:
      $date_format = visitors_mysql_date_format_sql($field_name, $format);
  }

  return $date_format;
}

/**
 * Set date format for mysql sql query.
 *
 * @param string $field_name
 *   Field name.
 * @param string $format
 *   Date format.
 *
 * @return string
 *   Date format.
 */
function visitors_mysql_date_format_sql($field_name, $format) {
  $mysql_current_timezone = visitors_get_mysql_current_timezone();
  $diff = visitors_timezone_diff();
  $timezone = (int) ($diff / 60 / 60);
  $timezone .= sprintf(':%02d', (abs($diff) / 60) % 60);
  if ($timezone >= 0) {
    $timezone = '+' . $timezone;
  }

  return sprintf(
    "date_format(convert_tz(from_unixtime(%s), '%s', '%s'), '%s')",
    $field_name,
    $mysql_current_timezone,
    $timezone,
    $format
  );
}

/**
 * Set date format for pgsql sql query.
 *
 * @param string $field_name
 *   Field name.
 * @param string $format
 *   Date format.
 *
 * @return string
 *   Date format.
 */
function visitors_pgsql_date_format_sql($field_name, $format) {
  static $format_array = [
    '%H'    => "to_char(TIMESTAMP 'epoch' + (%s + (%d)) * INTERVAL '1 second', 'HH24')",
    '%a'    => "to_char(TIMESTAMP 'epoch' + (%s + (%d)) * INTERVAL '1 second', 'dy')",
    '%w'    => "cast(to_char(TIMESTAMP 'epoch' + (%s + (%d)) * INTERVAL '1 second', 'D') as integer) - 1",
    '%d'    => "to_char(TIMESTAMP 'epoch' + (%s + (%d)) * INTERVAL '1 second', 'DD')",
    '%Y %M' => "to_char(TIMESTAMP 'epoch' + (%s + (%d)) * INTERVAL '1 second', 'YYYY Month')",
    '%Y%m'  => "to_char(TIMESTAMP 'epoch' + (%s + (%d)) * INTERVAL '1 second', 'YYYYMM')",
  ];

  if (isset($format_array[$format])) {
    $diff = visitors_timezone_diff();
    $result = sprintf($format_array[$format], $field_name, $diff);
  }
  else {
    $result = '';
  }

  return $result;
}

/**
 * Set date format for sqlite sql query.
 *
 * @param string $field_name
 *   Field name.
 * @param string $format
 *   Date format.
 *
 * @return string
 *   Date format.
 */
function visitors_sqlite_date_format_sql($field_name, $format) {
  static $format_array = [
    '%H'    => "strftime('%%H', %s + (%d), 'unixepoch')",
    '%a'    => "case strftime('%%w', %s + (%d), 'unixepoch')
                when '0' then 'Sun'
                when '1' then 'Mon'
                when '2' then 'Tue'
                when '3' then 'Wed'
                when '4' then 'Thu'
                when '5' then 'Fri'
                when '6' then 'Sat'
                else '' end",
    '%w'    => "strftime('%%w', %s + (%d), 'unixepoch')",
    '%d'    => "strftime('%%d', %s + (%d), 'unixepoch')",
    '%Y %M' => "strftime('%%Y ', %1\$s + (%2\$d), 'unixepoch') ||
                case strftime('%%m', %1\$s + (%2\$d), 'unixepoch')
                when '01' then 'January'
                when '02' then 'Febuary'
                when '03' then 'March'
                when '04' then 'April'
                when '05' then 'May'
                when '06' then 'June'
                when '07' then 'July'
                when '08' then 'August'
                when '09' then 'September'
                when '10' then 'October'
                when '11' then 'November'
                when '12' then 'December'
                else '' end",
    '%Y%m'  => "strftime('%%Y%%m', %s + (%d), 'unixepoch')",
  ];
  if (isset($format_array[$format])) {
    $diff = visitors_timezone_diff();
    $result = sprintf($format_array[$format], $field_name, $diff);
  }
  else {
    $result = '';
  }
  return $result;
}

/**
 * Build sql query from date filter values.
 */
function visitors_date_filter_sql_condition(&$query) {
  visitors_set_session_date_range();

  $from = visitors_get_from_timestamp();
  $to   = visitors_get_to_timestamp();

  $query->condition('visitors_date_time', [$from, $to], 'BETWEEN');
}

/**
 * Convert from date value to timestamp.
 *
 * @return int
 *   Unix timestamp of the session arguments given.
 */
function visitors_get_from_timestamp() {
  $diff = visitors_timezone_diff();
  $from = $_SESSION['visitors_from'];

  return gmmktime(0, 0, 0, $from['month'], $from['day'], $from['year']) - $diff;
}

/**
 * Convert to date value to timestamp.
 *
 * @return int
 *   Unix timestamp of the session arguments given.
 */
function visitors_get_to_timestamp() {
  $diff = visitors_timezone_diff();
  $to   = $_SESSION['visitors_to'];

  return gmmktime(23, 59, 59, $to['month'], $to['day'], $to['year']) - $diff;
}

/**
 * Set to session info default values for visitors date filter.
 */
function visitors_set_session_date_range() {
  if (!isset($_SESSION['visitors_from'])) {
    $_SESSION['visitors_from'] = [
      'day'   => 1,
      'month' => date('n'),
      'year'  => date('Y'),
    ];
  }

  if (!isset($_SESSION['visitors_to'])) {
    $_SESSION['visitors_to'] = [
      'day'   => date('j'),
      'month' => date('n'),
      'year'  => date('Y'),
    ];
  }
}

/**
 * Implements hook_page_attachment_alter().
 */
function visitors_page_attachments_alter(array &$page) {
  /** @var \Drupal\visitors\VisitorsVisibilityInterface $visibility_service */
  $visibility_service = \Drupal::service('visitors.visibility');
  if (!$visibility_service->isVisible()) {
    return NULL;
  }
  /** @var \Drupal\visitors\VisitorsScriptInterface $script_service */
  $script_service = \Drupal::service('visitors.script');
  // Add module cache tags.
  $tags = $page['#cache']['tags'] ?? [];
  $page['#cache']['tags'] = $script_service->cacheTags($tags);

  $script = $script_service->script();
  // Add tracker code.
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'script',
      '#value' => new JavaScriptSnippet($script),
    ],
    'visitors_tracking_script',
  ];

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Allow users to decide if tracking code will be added to pages or not.
 */
function visitors_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('visitors.config');
  /** @var \Drupal\user\AccountForm $userform */
  $user_form = $form_state->getFormObject();
  /** @var \Drupal\user\UserInterface $account */
  $account = $user_form->getEntity();
  $visibility_users = $config->get('visibility.user_account_mode');
  if ($account->hasPermission('opt-out of visitors tracking') && $visibility_users != 0) {
    $account_data_visitors = \Drupal::service('user.data')->get('visitors', $account->id());

    $form['visitors'] = [
      '#type' => 'details',
      '#title' => t('Visitors settings'),
      '#weight' => 3,
      '#open' => TRUE,
    ];
    $description = '';
    switch ($visibility_users) {
      case Settings::VISIBILITY_USER_ACCOUNT_MODE_OPT_OUT:
        $description = t('Users are tracked by default, but you are able to opt out.');
        break;

      case Settings::VISIBILITY_USER_ACCOUNT_MODE_OPT_IN:
        $description = t('Users are <em>not</em> tracked by default, but you are able to opt in.');
        break;
    }

    $form['visitors']['user_account_users'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable user tracking'),
      '#description' => $description,
      '#default_value' => $account_data_visitors['user_account_users'] ?? ($visibility_users == 1),
    ];

    // Custom submit handler.
    $form['actions']['submit']['#submit'][] = 'visitors_user_profile_form_submit';
  }
}

/**
 * Submit callback for user profile form to save the Visitor setting.
 */
function visitors_user_profile_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\user\AccountForm $user_form */
  $user_form = $form_state->getFormObject();
  /** @var \Drupal\user\UserInterface $account */
  $account = $user_form->getEntity();
  if ($account->id() && $form_state->hasValue('user_account_users')) {
    \Drupal::service('user.data')->set('visitors', $account->id(), 'user_account_users', (int) $form_state->getValue('user_account_users'));
  }

}
